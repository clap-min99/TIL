# 1260 DFSì™€ BFS
def DFS(V):
    visited[V] = 1
    stack = []
    S = V
    result = [S]
    while True:
        for w in adj_lst[S]:    
            if visited[w] == 0: 
                stack.append(w)
                visited[w] = 1
                S = w
                result.append(S)
                break
        else:
            if stack:
                S = stack.pop()
            else:
                break
    return result

from collections import deque
def BFS(V):
    q = deque([V])
    visited2[V] = 1
    while q:
        V = q.popleft()
        print(V, end =' ')
        for w in adj_lst[V]:
            if visited2[w] == 0:
                visited2[w] = 1
                q.append(w)
   

N, M, V = map(int, input().split())
adj_lst = [[] for _ in range(N+1)]

visited = [0]*(N+1)
visited2 = [0]*(N+1)
for _ in range(M):
    x, y = map(int, input().split())
    adj_lst[x].append(y)
    adj_lst[y].append(x)
for i in range(1, M):
    adj_lst[i].sort()

ans = DFS(V)
print(*ans)
BFS(V)